package wollits.hibernate;

// Generated Jun 14, 2014 7:45:27 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Locations generated by hbm2java
 */
@Entity
@Table(name = "locations", catalog = "wollits")
public class Locations implements java.io.Serializable {

	private int locationId;
	private LocationTypes locationTypes;
	private PostCodes postCodes;
	private String name;
	private Double latitude;
	private Double longitude;
	private String streetAddress;
	private String building;
	private String room;
	private String crossStreet;
	private Set<UserLocations> userLocationses = new HashSet<UserLocations>(0);
	private Set<Orders> orderses = new HashSet<Orders>(0);
	private Set<Restaurants> restaurantses = new HashSet<Restaurants>(0);

	public Locations() {
	}

	public Locations(int locationId) {
		this.locationId = locationId;
	}

	public Locations(int locationId, LocationTypes locationTypes,
			PostCodes postCodes, String name, Double latitude,
			Double longitude, String streetAddress, String building,
			String room, String crossStreet,
			Set<UserLocations> userLocationses, Set<Orders> orderses,
			Set<Restaurants> restaurantses) {
		this.locationId = locationId;
		this.locationTypes = locationTypes;
		this.postCodes = postCodes;
		this.name = name;
		this.latitude = latitude;
		this.longitude = longitude;
		this.streetAddress = streetAddress;
		this.building = building;
		this.room = room;
		this.crossStreet = crossStreet;
		this.userLocationses = userLocationses;
		this.orderses = orderses;
		this.restaurantses = restaurantses;
	}

	@Id
	@Column(name = "location_id", unique = true, nullable = false)
	public int getLocationId() {
		return this.locationId;
	}

	public void setLocationId(int locationId) {
		this.locationId = locationId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "location_type_id")
	public LocationTypes getLocationTypes() {
		return this.locationTypes;
	}

	public void setLocationTypes(LocationTypes locationTypes) {
		this.locationTypes = locationTypes;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "post_code_id")
	public PostCodes getPostCodes() {
		return this.postCodes;
	}

	public void setPostCodes(PostCodes postCodes) {
		this.postCodes = postCodes;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "latitude", precision = 22, scale = 0)
	public Double getLatitude() {
		return this.latitude;
	}

	public void setLatitude(Double latitude) {
		this.latitude = latitude;
	}

	@Column(name = "longitude", precision = 22, scale = 0)
	public Double getLongitude() {
		return this.longitude;
	}

	public void setLongitude(Double longitude) {
		this.longitude = longitude;
	}

	@Column(name = "street_address")
	public String getStreetAddress() {
		return this.streetAddress;
	}

	public void setStreetAddress(String streetAddress) {
		this.streetAddress = streetAddress;
	}

	@Column(name = "building")
	public String getBuilding() {
		return this.building;
	}

	public void setBuilding(String building) {
		this.building = building;
	}

	@Column(name = "room")
	public String getRoom() {
		return this.room;
	}

	public void setRoom(String room) {
		this.room = room;
	}

	@Column(name = "cross_street")
	public String getCrossStreet() {
		return this.crossStreet;
	}

	public void setCrossStreet(String crossStreet) {
		this.crossStreet = crossStreet;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "locations")
	public Set<UserLocations> getUserLocationses() {
		return this.userLocationses;
	}

	public void setUserLocationses(Set<UserLocations> userLocationses) {
		this.userLocationses = userLocationses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "locations")
	public Set<Orders> getOrderses() {
		return this.orderses;
	}

	public void setOrderses(Set<Orders> orderses) {
		this.orderses = orderses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "locations")
	public Set<Restaurants> getRestaurantses() {
		return this.restaurantses;
	}

	public void setRestaurantses(Set<Restaurants> restaurantses) {
		this.restaurantses = restaurantses;
	}

}
